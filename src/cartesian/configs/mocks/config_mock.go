// Code generated by MockGen. DO NOT EDIT.
// Source: src/cartesian/config/config.go

// Package mock_config is a generated GoMock package.
package mock_config

import (
	gomock "github.com/golang/mock/gomock"
	abstract "github.com/zored/cartesian/src/cartesian/abstract"
	config "github.com/zored/cartesian/src/cartesian/configs"
	reflect "reflect"
)

// MockEntityTemplate is a mock of EntityTemplate interface
type MockEntityTemplate struct {
	ctrl     *gomock.Controller
	recorder *MockEntityTemplateMockRecorder
}

// MockEntityTemplateMockRecorder is the mock recorder for MockEntityTemplate
type MockEntityTemplateMockRecorder struct {
	mock *MockEntityTemplate
}

// NewMockEntityTemplate creates a new mock instance
func NewMockEntityTemplate(ctrl *gomock.Controller) *MockEntityTemplate {
	mock := &MockEntityTemplate{ctrl: ctrl}
	mock.recorder = &MockEntityTemplateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEntityTemplate) EXPECT() *MockEntityTemplateMockRecorder {
	return m.recorder
}

// MockFields is a mock of Fields interface
type MockFields struct {
	ctrl     *gomock.Controller
	recorder *MockFieldsMockRecorder
}

// MockFieldsMockRecorder is the mock recorder for MockFields
type MockFieldsMockRecorder struct {
	mock *MockFields
}

// NewMockFields creates a new mock instance
func NewMockFields(ctrl *gomock.Controller) *MockFields {
	mock := &MockFields{ctrl: ctrl}
	mock.recorder = &MockFieldsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFields) EXPECT() *MockFieldsMockRecorder {
	return m.recorder
}

// GetIOs mocks base method
func (m *MockFields) GetIOs() config.IOs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIOs")
	ret0, _ := ret[0].(config.IOs)
	return ret0
}

// GetIOs indicates an expected call of GetIOs
func (mr *MockFieldsMockRecorder) GetIOs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIOs", reflect.TypeOf((*MockFields)(nil).GetIOs))
}

// CreateEntityValues mocks base method
func (m *MockFields) CreateEntityValues(arg0 *config.Context) abstract.EntityValues {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntityValues", arg0)
	ret0, _ := ret[0].(abstract.EntityValues)
	return ret0
}

// CreateEntityValues indicates an expected call of CreateEntityValues
func (mr *MockFieldsMockRecorder) CreateEntityValues(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntityValues", reflect.TypeOf((*MockFields)(nil).CreateEntityValues), arg0)
}

// Len mocks base method
func (m *MockFields) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockFieldsMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockFields)(nil).Len))
}

// Index mocks base method
func (m *MockFields) Index(i int) config.Field {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", i)
	ret0, _ := ret[0].(config.Field)
	return ret0
}

// Index indicates an expected call of Index
func (mr *MockFieldsMockRecorder) Index(i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockFields)(nil).Index), i)
}

// MockField is a mock of Field interface
type MockField struct {
	ctrl     *gomock.Controller
	recorder *MockFieldMockRecorder
}

// MockFieldMockRecorder is the mock recorder for MockField
type MockFieldMockRecorder struct {
	mock *MockField
}

// NewMockField creates a new mock instance
func NewMockField(ctrl *gomock.Controller) *MockField {
	mock := &MockField{ctrl: ctrl}
	mock.recorder = &MockFieldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockField) EXPECT() *MockFieldMockRecorder {
	return m.recorder
}

// CreateValues mocks base method
func (m *MockField) CreateValues(io *config.Context) abstract.Values {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateValues", io)
	ret0, _ := ret[0].(abstract.Values)
	return ret0
}

// CreateValues indicates an expected call of CreateValues
func (mr *MockFieldMockRecorder) CreateValues(io interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateValues", reflect.TypeOf((*MockField)(nil).CreateValues), io)
}

// GetName mocks base method
func (m *MockField) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockFieldMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockField)(nil).GetName))
}

// GetParentValue mocks base method
func (m *MockField) GetParentValue(arg0 abstract.Value) abstract.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentValue", arg0)
	ret0, _ := ret[0].(abstract.Value)
	return ret0
}

// GetParentValue indicates an expected call of GetParentValue
func (mr *MockFieldMockRecorder) GetParentValue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentValue", reflect.TypeOf((*MockField)(nil).GetParentValue), arg0)
}
