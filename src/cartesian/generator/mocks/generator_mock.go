// Code generated by MockGen. DO NOT EDIT.
// Source: src/cartesian/generator/generator.go

// Package mock_generator is a generated GoMock package.
package mock_generator

import (
	gomock "github.com/golang/mock/gomock"
	configs "github.com/zored/cartesian/src/cartesian/configs"
	state "github.com/zored/cartesian/src/cartesian/generator/state"
	reflect "reflect"
)

// MockGenerator is a mock of Generator interface
type MockGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratorMockRecorder
}

// MockGeneratorMockRecorder is the mock recorder for MockGenerator
type MockGeneratorMockRecorder struct {
	mock *MockGenerator
}

// NewMockGenerator creates a new mock instance
func NewMockGenerator(ctrl *gomock.Controller) *MockGenerator {
	mock := &MockGenerator{ctrl: ctrl}
	mock.recorder = &MockGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGenerator) EXPECT() *MockGeneratorMockRecorder {
	return m.recorder
}

// State mocks base method
func (m *MockGenerator) State(arg0 configs.Context) (state.State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", arg0)
	ret0, _ := ret[0].(state.State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// State indicates an expected call of State
func (mr *MockGeneratorMockRecorder) State(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockGenerator)(nil).State), arg0)
}

// Next mocks base method
func (m *MockGenerator) Next(st state.State) (reflect.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", st)
	ret0, _ := ret[0].(reflect.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockGeneratorMockRecorder) Next(st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockGenerator)(nil).Next), st)
}

// Done mocks base method
func (m *MockGenerator) Done(st state.State) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done", st)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockGeneratorMockRecorder) Done(st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockGenerator)(nil).Done), st)
}

// GetIOs mocks base method
func (m *MockGenerator) GetIOs() configs.IOs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIOs")
	ret0, _ := ret[0].(configs.IOs)
	return ret0
}

// GetIOs indicates an expected call of GetIOs
func (mr *MockGeneratorMockRecorder) GetIOs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIOs", reflect.TypeOf((*MockGenerator)(nil).GetIOs))
}
